Parameters:
    env:
        Type: String
        Description: Environment
Resources:
  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: IAM Role to allow Step Functions to call Lambdas
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      RoleName: HN_Step_Functions_Role
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Description: "IAM Role to allow Lambdas to use SSM"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
      RoleName: HN_Lambda_Role
  LatestMonth:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../data_ingestion/lambdas/latest_month
      Handler: latest_month.lambda_handler
      Layers:
        - arn:aws:lambda:us-east-1:290321588373:layer:Automation:7
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.6
      Description: Getting latest month to load
      Timeout: 5
      Environment:
        Variables:
          env: !Sub '${env}'
  IngestingPosts:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../data_ingestion/lambdas/ingesting_posts
      Handler: ingesting_posts.lambda_handler
      Layers:
        - arn:aws:lambda:us-east-1:290321588373:layer:Automation:7
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.6
      Description: Ingesting Posts
      Timeout: 600
      Environment:
        Variables:
          env: !Sub '${env}'
  TransformingPosts:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../data_ingestion/lambdas/transforming_posts
      Handler: transforming_posts.lambda_handler
      Layers:
      - arn:aws:lambda:us-east-1:290321588373:layer:Automation:7
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.6
      Description: Transforming Posts
      Timeout: 120
      Environment:
        Variables:
          env: !Sub '${env}'
  ScoringPosts:
    Type: AWS::Lambda::Function
    Properties:
      Code: ../data_ingestion/lambdas/scoring_posts
      Handler: scoring_posts.lambda_handler
      Layers:
      - arn:aws:lambda:us-east-1:290321588373:layer:Automation:7
      Role: !GetAtt IAMRole.Arn
      Runtime: python3.6
      Description: Scoring Posts
      Timeout: 120
      Environment:
        Variables:
          env: !Sub '${env}'
  StateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    DependsOn:
      - IngestingPosts
      - TransformingPosts
      - ScoringPosts
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      StateMachineName: Cloud_Formation_Stack
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "Get Latest Month",
              "States": {
                "Get Latest Month": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${LatestMonthArn}"
                  },
                  "OutputPath": "$.Payload",
                  "Next": "Ingest Posts"
                },
                "Ingest Posts": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${IngestingPostsArn}",
                    "Payload": {
                      "calendar_id.$": "$.calendar_id"
                    }
                  },
                  "ResultPath": null,
                  "Next": "Transform Posts"
                },
                "Transform Posts": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${TransformingPostsArn}",
                    "Payload": {
                      "calendar_id.$": "$.calendar_id"
                    }
                  },
                  "Next": "Score Posts",
                  "ResultPath": null
                },
                "Score Posts": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "Parameters": {
                    "FunctionName": "${ScoringPostsArn}",
                    "Payload": {
                      "calendar_id.$": "$.calendar_id"
                    }
                  },
                  "End": true
                }
              }
            }
          - IngestingPostsArn: !GetAtt IngestingPosts.Arn
            TransformingPostsArn: !GetAtt TransformingPosts.Arn
            ScoringPostsArn: !GetAtt ScoringPosts.Arn
            LatestMonthArn: !GetAtt LatestMonth.Arn
  RuleRole:
    Type: AWS::IAM::Role
    DependsOn:
      - StateMachine
    Properties:
      Description: "Role to allow Cloudwatch to call State Machine"
      RoleName: "Cloudwatch_Step_Function_Invocation"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "Invoke_State_Machine"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "states:StartExecution"
                Resource: !Ref StateMachine
  ScheduledRule:
    Type: AWS::Events::Rule
    DependsOn:
      - RuleRole
      - StateMachine
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(4 hours)"
      State: "ENABLED"
      Targets:
        - Arn: !Ref StateMachine
          Id: Run_State_Machine
          Input: "{\"calendar_id\": \"dummy\"}"
          RoleArn: !GetAtt RuleRole.Arn
